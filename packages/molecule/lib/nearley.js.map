{"version":3,"file":"nearley.js","names":["grammar","require","createParser","parse","data","parser","nearley","Parser","Grammar","fromCompiled","feed","results","filter","result","validateParserResults","byte","checkDuplicateNames","checkDependencies","names","Set","forEach","currentName","name","has","Error","add","currentType","type","fieldNames","fields","field","currentFieldName","map","toMolTypeMap","entry","molItem","get","nonNull","assertFixedMolType","item","unionDeps","items","dep","tableDeps"],"sources":["../src/nearley.ts"],"sourcesContent":["import nearley from \"nearley\";\nimport { Struct, Vector, Union, Array, Table, Field, MolType, MolTypeMap, Parser } from \"./type\";\nimport { nonNull, toMolTypeMap } from \"./utils\";\n\nconst grammar = require(\"./grammar/mol.js\");\n\nexport const createParser = (): Parser => {\n  return {\n    parse: (data) => {\n      const parser = new nearley.Parser(nearley.Grammar.fromCompiled(grammar));\n      parser.feed(data);\n      const results = parser.results[0].filter(\n        (result: MolType | null) => !!result\n      ) as MolType[];\n      validateParserResults(results);\n      return results;\n    },\n  };\n};\n/**\n * primitive type\n */\n export const byte = \"byte\";\n\nconst validateParserResults = (results: MolType[]) => {\n  checkDuplicateNames(results);\n  checkDependencies(results);\n};\n\nconst checkDuplicateNames = (results: MolType[]) => {\n  const names = new Set<string>();\n  results.forEach((result) => {\n    const currentName = result.name;\n    if (names.has(currentName)) {\n      throw new Error(`Duplicate name: ${currentName}`);\n    }\n    names.add(currentName);\n    const currentType = result.type;\n    // check duplicate field names in `struct` and `table`\n    if (currentType === \"struct\" || currentType === \"table\") {\n      const fieldNames = new Set<string>();\n      (result as Struct).fields.forEach((field: Field) => {\n        const currentFieldName = field.name;\n        if (fieldNames.has(currentFieldName)) {\n          throw new Error(`Duplicate field name: ${currentFieldName}`);\n        }\n        fieldNames.add(currentFieldName);\n      });\n    }\n  });\n};\nconst checkDependencies = (results: MolType[]) => {\n  const map = toMolTypeMap(results);\n  for (const entry of map) {\n    const molItem = map.get(entry[0])!;\n    nonNull(molItem);\n    const type = molItem.type;\n    switch (type) {\n      case \"array\":\n      case \"struct\":\n        assertFixedMolType(molItem.name, map);\n        break;\n      case \"vector\":\n      case \"option\":\n        if ((molItem as Vector).item !== byte) {\n          nonNull(map.get((molItem as Vector).item));\n        }\n        break;5\n      case \"union\":\n        const unionDeps = (molItem as Union).items;\n        unionDeps.forEach((dep: string) => {\n          if (dep !== byte) {\n            nonNull(map.get(dep));\n          }\n        });\n        break;\n      case \"table\":\n        const tableDeps = (molItem as Table).fields.map((field: Field) => field.type);\n        tableDeps.forEach((dep: string) => {\n          if (dep !== byte) {\n            nonNull(map.get(dep));\n          }\n        });\n        break;\n      default:\n        break;\n    }\n  }\n};\n\n/**\n * mol type `array` and `struct` should have fixed byte length\n */\nconst assertFixedMolType = (name: string, map: MolTypeMap) => {\n  const molItem = map.get(name)!;\n  nonNull(molItem);\n  const type = molItem.type;\n  switch (type) {\n    case \"array\":\n      if ((molItem as Array).item !== byte) {\n        assertFixedMolType(molItem.name, map);\n      }\n      break;\n    case \"struct\":\n      const fields = (molItem as Struct).fields;\n      fields.forEach((field: Field) => {\n        if (field.type !== byte) {\n          assertFixedMolType(field.type, map);\n        }\n      });\n      break;\n    default:\n      throw new Error(`Type ${name} should be fixed length.`);\n  }\n};\n\n"],"mappings":"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"}