{"version":3,"file":"codec.js","names":["createHexBytesCodec","createBytesCodec","pack","hex","bytes","bytify","unpack","buf","hexify","toCodec","key","molTypeMap","result","has","get","molType","nonNull","codec","type","name","startsWith","number","Uint8","Uint16","Uint32","Uint64","Uint128","Uint256","Uint512","Error","item","byte","createFixedHexBytesCodec","item_count","itemMolType","array","byteVecOf","vector","option","itemMolTypes","items","unionCodecs","forEach","itemMolTypeName","union","Object","keys","tableFields","fields","tableCodecs","field","table","map","structFields","structCodecs","struct","set","console","error","createCodecMap","Map","entry"],"sources":["../src/codec.ts"],"sourcesContent":["import { FixedBytesCodec, createBytesCodec, BytesLike, BytesCodec } from '@ckb-lumos/codec/lib/base';\nimport { array, byteVecOf, option, struct, table, union, vector } from '@ckb-lumos/codec/lib/molecule';\nimport { createFixedHexBytesCodec } from '@ckb-lumos/codec/lib/blockchain';\nimport { byte, CodecMap, MolType, MolTypeMap } from \"./type\";\nimport { nonNull } from './utils';\nimport { bytes, number } from '@ckb-lumos/codec';\n\nfunction createHexBytesCodec(): BytesCodec<string, BytesLike> {\n  return createBytesCodec({\n    pack: (hex) => bytes.bytify(hex),\n    unpack: (buf) => bytes.hexify(buf),\n  });\n}\n\n/**\n * Add corresponding type and its depencies to result, then return coressponding codec\n * @param key \n * @param molTypeMap \n * @param result \n * @returns codec\n */\nexport const toCodec = ( key: string, molTypeMap: MolTypeMap, result: CodecMap): BytesCodec => {\n  if(result.has(key)) {\n    return result.get(key)!\n  } \n  const molType: MolType = molTypeMap.get(key)!\n  nonNull(molType)\n  let codec = null\n  switch (molType.type) {\n    case \"array\":\n      if(molType.name.startsWith(\"Uint\")) {\n        switch (molType.name) {\n          case \"Uint8\":\n            codec = number.Uint8\n            break;\n          case \"Uint16\":\n            codec = number.Uint16\n            break;\n          case \"Uint32\":\n            codec = number.Uint32\n            break;\n          case \"Uint64\":\n            codec = number.Uint64\n            break;\n          case \"Uint128\":\n            codec = number.Uint128\n            break;\n          case \"Uint256\":\n            codec = number.Uint256\n            break;\n          case \"Uint512\":\n            codec = number.Uint512\n            break;\n          default:\n            throw new Error(`Number codecs should be among Uint8,Uint8,Uint8,Uint8,Uint8,Uint8,Uint8 but got ${molType.name}.`);\n        }\n      }else if(molType.item === byte) {\n        codec = createFixedHexBytesCodec(molType.item_count)\n      } else {\n        const itemMolType = toCodec(molType.item, molTypeMap, result)\n        codec = array(itemMolType as FixedBytesCodec, molType.item_count)        \n      }\n      break;\n    case \"vector\":\n      if(molType.item === byte) {\n        codec = byteVecOf(createHexBytesCodec())\n      } else {\n        const itemMolType = toCodec(molType.item, molTypeMap, result)\n        codec = vector(itemMolType)        \n      }\n      break;\n    case \"option\":\n      if(molType.item === byte) {\n        codec = option(createFixedHexBytesCodec(1))\n      } else {\n        \n        const itemMolType = toCodec(molType.item, molTypeMap, result)\n        codec = option(itemMolType)        \n      }\n      break;\n    case \"union\":\n      const itemMolTypes = molType.items\n      const unionCodecs: Record<string, BytesCodec> = {}\n      itemMolTypes.forEach(itemMolTypeName => {\n        if(itemMolTypeName === byte) {\n          unionCodecs[itemMolTypeName] = createFixedHexBytesCodec(1)\n        } else {\n          const itemMolType = toCodec(itemMolTypeName, molTypeMap, result)\n          unionCodecs[itemMolTypeName] = itemMolType\n        }\n      })\n      codec = union(unionCodecs, Object.keys(unionCodecs))\n      break;\n    case \"table\":\n      const tableFields = molType.fields\n      const tableCodecs: Record<string, BytesCodec> = {}\n      tableFields.forEach(field => {\n        if(field.type === byte) {\n          tableCodecs[field.name] = createFixedHexBytesCodec(1)\n        } else {\n          const itemMolType = toCodec(field.type, molTypeMap, result)\n          tableCodecs[field.name] = itemMolType\n        }\n      })\n      codec = table(tableCodecs, tableFields.map(field => field.name))\n      break;\n    case \"struct\":\n      const structFields = molType.fields\n      const structCodecs: Record<string, FixedBytesCodec> = {}\n      structFields.forEach(field => {\n        if(field.type === byte) {\n          structCodecs[field.name] = createFixedHexBytesCodec(1)\n        } else {\n          const itemMolType = toCodec(field.type, molTypeMap, result)\n          structCodecs[field.name] = itemMolType as FixedBytesCodec\n        }\n      })\n      codec = struct(structCodecs, structFields.map(field => field.name))\n      break;\n    default:\n      throw new Error(`Not supportted molecule type ${molType}.`);\n  }\n  nonNull(codec)\n  if(!result.has(key)) {\n    result.set(key, codec)\n  } else {\n    console.error(`Existing codec: ${key} has been added to result.`)\n  }\n  return codec\n}\n\n/**\n * create Codecs from tokens\n * @param molTypeMap \n * @returns \n */\nexport const createCodecMap = (molTypeMap: MolTypeMap): CodecMap => {\n  const result = new Map<string, BytesCodec>();\n  for (const entry of molTypeMap) {\n    toCodec(entry[0], molTypeMap, result)\n  }\n  return result;\n}"],"mappings":"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"}