// This file is generated by @ckb-lumos/molecule, please do not modify it manually.
/* eslint-disable */
import { bytes, createBytesCodec, createFixedBytesCodec, molecule } from "@ckb-lumos/codec";
import  { Uint32, Bytes, Byte32, String, BytesVec, Transaction, CellOutputVec }  from '../shared-codecs'

const { array, vector, union, option, struct, table } = molecule;

const fallbackBytesCodec = createBytesCodec({
  pack: bytes.bytify,
  unpack: bytes.hexify,
});

function createFallbackFixedBytesCodec(byteLength: number) {
  return createFixedBytesCodec({
    pack: bytes.bytify,
    unpack: bytes.hexify,
    byteLength,
  });
}

const byte = createFallbackFixedBytesCodec(1);

export const Hash = createFallbackFixedBytesCodec(32);

export const Uint32Opt = option(Uint32);

export const Action = table({
  scriptInfoHash: Byte32,
  scriptHash: Byte32,
  data: Bytes
}, ['scriptInfoHash', 'scriptHash', 'data']);

export const ActionVec = vector(Action);

export const Message = table({
  actions: ActionVec
}, ['actions']);

export const ScriptInfo = table({
  name: String,
  url: String,
  scriptHash: Byte32,
  schema: String,
  messageType: String
}, ['name', 'url', 'scriptHash', 'schema', 'messageType']);

export const ScriptInfoVec = vector(ScriptInfo);

export const ResolvedInputs = table({
  outputs: CellOutputVec,
  outputsData: BytesVec
}, ['outputs', 'outputsData']);

export const BuildingPacketV1 = table({
  message: Message,
  payload: Transaction,
  resolvedInputs: ResolvedInputs,
  changeOutput: Uint32Opt,
  scriptInfos: ScriptInfoVec,
  lockActions: ActionVec
}, ['message', 'payload', 'resolvedInputs', 'changeOutput', 'scriptInfos', 'lockActions']);

export const BuildingPacket = union({
  BuildingPacketV1
}, ['BuildingPacketV1']);

export const SighashAll = table({
  message: Message,
  seal: Bytes
}, ['message', 'seal']);

export const SighashAllOnly = table({
  seal: Bytes
}, ['seal']);

export const SealPair = table({
  scriptHash: Byte32,
  seal: Bytes
}, ['scriptHash', 'seal']);

export const SealPairVec = vector(SealPair);

export const OtxStart = table({
  startInputCell: Uint32,
  startOutputCell: Uint32,
  startCellDeps: Uint32,
  startHeaderDeps: Uint32
}, ['startInputCell', 'startOutputCell', 'startCellDeps', 'startHeaderDeps']);

export const Otx = table({
  inputCells: Uint32,
  outputCells: Uint32,
  cellDeps: Uint32,
  headerDeps: Uint32,
  message: Message,
  seals: SealPairVec
}, ['inputCells', 'outputCells', 'cellDeps', 'headerDeps', 'message', 'seals']);
